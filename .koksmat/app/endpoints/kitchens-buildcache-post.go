// -------------------------------------------------------------------
// Generated by 365admin-publish/api/20 makeschema.ps1
// -------------------------------------------------------------------
/*
---
title: Build Cache files for each Kitchens
---
*/
package endpoints

import (
	"context"
	"encoding/json"
	"os"
	"path"

	"github.com/swaggest/usecase"

	"github.com/magicbutton/365admin-publish/execution"
	"github.com/magicbutton/365admin-publish/schemas"
	"github.com/magicbutton/365admin-publish/utils"
)

func KitchensBuildcachePost() usecase.Interactor {
	type Request struct {
		Body schemas.KitchensFound `json:"body" binding:"required"`
	}
	u := usecase.NewInteractor(func(ctx context.Context, input Request, output *schemas.KitchensBuild) error {
		body, inputErr := json.Marshal(input.Body)
		if inputErr != nil {
			return inputErr
		}

		inputErr = os.WriteFile(path.Join(utils.WorkDir("365admin-publish"), "kitchens-found.json"), body, 0644)
		if inputErr != nil {
			return inputErr
		}

		_, err := execution.ExecutePowerShell("john", "*", "365admin-publish", "docusaurus", "20-build.ps1", "")
		if err != nil {
			return err
		}

		resultingFile := path.Join(utils.WorkDir("365admin-publish"), "kitchens-build.json")
		data, err := os.ReadFile(resultingFile)
		if err != nil {
			return err
		}
		resultObject := schemas.KitchensBuild{}
		err = json.Unmarshal(data, &resultObject)
		*output = resultObject
		return err

	})
	u.SetTitle("Build Cache files for each Kitchens")
	// u.SetExpectedErrors(status.InvalidArgument)
	u.SetTags("docusaurus")
	return u
}
